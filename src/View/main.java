/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Object.Point3D;
import Object2D.Car;
import Object2D.Clockwatcher;
import Object2D.RoadMarking;
import Object2D.Star;
import Object3D.Rectangular;
import Object3D.SquarePyramid;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Welcome
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setTitle("Vẽ hình cơ bản");
        setIconImage(readFileBufferedImage("./src/image/woodland.PNG"));

        WIDTH3D = lbl3D.getWidth();
        HEIGHT3D = lbl3D.getHeight();
        originImage3D = readFileBufferedImage(path3D);
        img3D = copyImage(originImage3D);
        originImage2D = readFileBufferedImage(path2D);
        WIDTH2D = lbl2D.getWidth();
        HEIGHT2D = lbl2D.getHeight();
        img2D = copyImage(originImage2D);
        img2DPicture = readFileBufferedImage(path2DPicture);
        img2DClockwatcher = readFileBufferedImage(path2DClockwatcher);
        //
        root3D = new Point(WIDTH3D / 5 * 2 - 1, HEIGHT3D / 2 - 1);
        root2D = new Point(WIDTH2D / 2, HEIGHT2D / 2);
        //set icon
        setIcon(img3D, lbl3D);
        setIcon(img2D, lbl2D);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        tbb = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lbl2D = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        cbGrib = new javax.swing.JCheckBox();
        tbbShow = new javax.swing.JTabbedPane();
        pnlClockwatcher = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlCar = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        cbPicture = new javax.swing.JCheckBox();
        cbClockwatcher = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lbl3D = new javax.swing.JLabel();
        lbl2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        lblRect = new javax.swing.JLabel();
        lblSquarePyramid = new javax.swing.JLabel();
        btnDraw = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        lblE = new javax.swing.JLabel();
        lblG = new javax.swing.JLabel();
        lblA = new javax.swing.JLabel();
        lblF = new javax.swing.JLabel();
        lblB = new javax.swing.JLabel();
        lblC = new javax.swing.JLabel();
        lblD = new javax.swing.JLabel();
        lblH = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        lbl1 = new javax.swing.JLabel();
        txt1 = new javax.swing.JTextField();
        txt2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lbl3 = new javax.swing.JLabel();
        txt3 = new javax.swing.JTextField();
        lbl5 = new javax.swing.JLabel();
        lbl6 = new javax.swing.JLabel();
        txt6 = new javax.swing.JTextField();
        txt5 = new javax.swing.JTextField();
        txt4 = new javax.swing.JTextField();
        lbl4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbb.setBackground(new java.awt.Color(102, 255, 255));
        tbb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbb.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tbbStateChanged(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl2D, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl2D, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 14, -1, -1));

        jPanel5.setBackground(new java.awt.Color(255, 153, 102));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbGrib.setText("Pixel Grid");
        jPanel5.add(cbGrib, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 14, 109, -1));

        tbbShow.setBackground(new java.awt.Color(255, 153, 51));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/ClockwatcherShow.PNG"))); // NOI18N

        javax.swing.GroupLayout pnlClockwatcherLayout = new javax.swing.GroupLayout(pnlClockwatcher);
        pnlClockwatcher.setLayout(pnlClockwatcherLayout);
        pnlClockwatcherLayout.setHorizontalGroup(
            pnlClockwatcherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlClockwatcherLayout.setVerticalGroup(
            pnlClockwatcherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tbbShow.addTab("Clockwatcher", pnlClockwatcher);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/RoadMarkingShow.PNG"))); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tbbShow.addTab("RoadMarking", jPanel8);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/StarShow.PNG"))); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
        );

        tbbShow.addTab("Star", jPanel9);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/CarShow.PNG"))); // NOI18N

        javax.swing.GroupLayout pnlCarLayout = new javax.swing.GroupLayout(pnlCar);
        pnlCar.setLayout(pnlCarLayout);
        pnlCarLayout.setHorizontalGroup(
            pnlCarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlCarLayout.setVerticalGroup(
            pnlCarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tbbShow.addTab("Car", pnlCar);

        jPanel5.add(tbbShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        jPanel10.setBackground(new java.awt.Color(255, 153, 102));
        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonGroup1.add(cbPicture);
        cbPicture.setText("Picture");
        cbPicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPictureActionPerformed(evt);
            }
        });

        buttonGroup1.add(cbClockwatcher);
        cbClockwatcher.setText("Clockwatcher");
        cbClockwatcher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClockwatcherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbClockwatcher, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbClockwatcher, cbPicture});

        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbClockwatcher)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbPicture)
                .addContainerGap())
        );

        jPanel5.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 14, -1, 73));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1233, 14, 350, 702));

        tbb.addTab("__2D__", jPanel1);

        jPanel2.setBackground(new java.awt.Color(102, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbl3D.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl3D, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl3D, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 14, -1, -1));

        lbl2.setBackground(new java.awt.Color(255, 153, 102));
        lbl2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBackground(new java.awt.Color(255, 153, 102));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/hcn.png"))); // NOI18N
        lblRect.setText("Rect");
        lblRect.setToolTipText("Rectangular");
        lblRect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblRect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRectMouseClicked(evt);
            }
        });

        lblSquarePyramid.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/hc.png"))); // NOI18N
        lblSquarePyramid.setText("Cylinder");
        lblSquarePyramid.setToolTipText("Square Pyramid");
        lblSquarePyramid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblSquarePyramid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSquarePyramidMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(lblRect, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(lblSquarePyramid, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblRect, lblSquarePyramid});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRect, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSquarePyramid, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblRect, lblSquarePyramid});

        lbl2.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 9, 324, -1));

        btnDraw.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnDraw.setText("Draw Rect");
        btnDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrawActionPerformed(evt);
            }
        });
        lbl2.add(btnDraw, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 420, 186, 34));

        jPanel7.setBackground(new java.awt.Color(255, 153, 102));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.add(lblE, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 14, 146, 30));

        lblG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.add(lblG, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 88, 146, 30));

        lblA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.add(lblA, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 14, 146, 30));

        lblF.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.add(lblF, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 51, 146, 30));

        lblB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.add(lblB, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 51, 146, 30));

        lblC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.add(lblC, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 88, 146, 30));

        lblD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.add(lblD, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 125, 146, 30));

        lblH.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblH.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.add(lblH, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 125, 146, 30));

        lbl2.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 105, 326, 167));

        jPanel11.setBackground(new java.awt.Color(255, 153, 102));
        jPanel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl1.setText("X");

        txt1.setText("20");

        txt2.setText("50");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Y");

        lbl3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl3.setText("Z");

        txt3.setText("70");

        lbl5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl5.setText("H");

        lbl6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl6.setText("W");

        txt6.setText("30");

        txt5.setText("70");

        txt4.setText("50");

        lbl4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl4.setText("L");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(lbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(lbl5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(lbl6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(txt6, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(lbl3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(lbl4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbl6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txt6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbl2.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 330, 120));

        jPanel2.add(lbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1233, 14, 350, 702));

        tbb.addTab("__3D__", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbb, javax.swing.GroupLayout.PREFERRED_SIZE, 1600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbb)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblRectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRectMouseClicked
        // TODO add your handling code here:
        btnDraw.setText("Draw Rect");
        isRectangular = true;
        lbl4.setText("L");
        lbl6.setVisible(true);
        txt6.setVisible(true);
        positionVisible3D(true);
        resetInforLable();
    }//GEN-LAST:event_lblRectMouseClicked

    private void btnDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrawActionPerformed
        // TODO add your handling code here:
        int x = 0, y = 0, z = 0, h = 0, w = 0, l = 0, ratio = 5;
        if (isRectangular) {
            // get value
            try {
                x = Integer.parseInt(txt1.getText()) * ratio;
                y = Integer.parseInt(txt2.getText()) * ratio;
                z = Integer.parseInt(txt3.getText()) * ratio;
                l = Integer.parseInt(txt4.getText()) * ratio;
                h = Integer.parseInt(txt5.getText()) * ratio;
                w = Integer.parseInt(txt6.getText()) * ratio;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Nhập Sai!");
                return;
            }
            //draw
            Point3D p3D = new Point3D(x, y, z);
            img3D = new Rectangular(p3D, l, w, h, img3D, root3D).draw();
            //show info
            Point3D p3d;
            p3d = new Rectangular(p3D, l, w, h, img3D, root3D).getPosition3D("A");
            lblA.setText("A(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio + ", " + p3d.getZ() / ratio + ")");
            p3d = new Rectangular(p3D, l, w, h, img3D, root3D).getPosition3D("B");
            lblB.setText("B(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio + ", " + p3d.getZ() / ratio + ")");
            p3d = new Rectangular(p3D, l, w, h, img3D, root3D).getPosition3D("C");
            lblC.setText("C(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio + ", " + p3d.getZ() / ratio + ")");
            p3d = new Rectangular(p3D, l, w, h, img3D, root3D).getPosition3D("D");
            lblD.setText("D(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio + ", " + p3d.getZ() / ratio + ")");
            p3d = new Rectangular(p3D, l, w, h, img3D, root3D).getPosition3D("E");
            lblE.setText("E(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio + ", " + p3d.getZ() / ratio + ")");
            p3d = new Rectangular(p3D, l, w, h, img3D, root3D).getPosition3D("F");
            lblF.setText("F(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio + ", " + p3d.getZ() / ratio + ")");
            p3d = new Rectangular(p3D, l, w, h, img3D, root3D).getPosition3D("G");
            lblG.setText("G(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio + ", " + p3d.getZ() / ratio + ")");
            p3d = new Rectangular(p3D, l, w, h, img3D, root3D).getPosition3D("H");
            lblH.setText("H(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio + ", " + p3d.getZ() / ratio + ")");
        } else {
            //get value
            try {
                x = Integer.parseInt(txt1.getText()) * ratio;
                y = Integer.parseInt(txt2.getText()) * ratio;
                z = Integer.parseInt(txt3.getText()) * ratio;
                w = Integer.parseInt(txt4.getText()) * ratio;
                h = Integer.parseInt(txt5.getText()) * ratio;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Nhập Sai!");
                return;
            }
            //draw
            Point3D p3D = new Point3D(x, y, z);
            img3D = new SquarePyramid(p3D, h, w, img3D, root3D).draw();
            //show infor
            Point3D p3d;
            lblA.setText("A(" + x + ", " + y + ", " + z + ")");
            p3d = new SquarePyramid(p3D, h, w, img3D, root3D).getPosition3D("B");
            lblB.setText("B(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio
                    + ", " + p3d.getZ() / ratio + ")");
            p3d = new SquarePyramid(p3D, h, w, img3D, root3D).getPosition3D("C");
            lblC.setText("C(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio
                    + ", " + p3d.getZ() / ratio + ")");
            p3d = new SquarePyramid(p3D, h, w, img3D, root3D).getPosition3D("D");
            lblD.setText("D(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio
                    + ", " + p3d.getZ() / ratio + ")");
            p3d = new SquarePyramid(p3D, h, w, img3D, root3D).getPosition3D("O");
            lblE.setText("O(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio
                    + ", " + p3d.getZ() / ratio + ")");
            p3d = new SquarePyramid(p3D, h, w, img3D, root3D).getPosition3D("S");
            lblF.setText("S(" + p3d.getX() / ratio + ", " + p3d.getY() / ratio
                    + ", " + p3d.getZ() / ratio + ")");
        }
        //draw on lbl3D
        setIcon(img3D, lbl3D);
//        Graphics g = pnl3D.getGraphics();
//        g.drawImage(img3D, 0, 0, null);
        img3D = copyImage(originImage3D);

    }//GEN-LAST:event_btnDrawActionPerformed

    private void lblSquarePyramidMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSquarePyramidMouseClicked
        // TODO add your handling code here:
        btnDraw.setText("Draw Square Pyramid");
        isRectangular = false;
        lbl4.setText("R");
        lbl6.setVisible(false);
        txt6.setVisible(false);
        positionVisible3D(false);
        resetInforLable();
    }//GEN-LAST:event_lblSquarePyramidMouseClicked

    private void cbClockwatcherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClockwatcherActionPerformed
        // TODO add your handling code here:
        //reset image
        img2D = copyImage(img2DClockwatcher);
        //draw
        startClockwatcher();
    }//GEN-LAST:event_cbClockwatcherActionPerformed

    private void cbPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPictureActionPerformed
        // TODO add your handling code here:
        //da tung ve 2d
        if (!isDrew2D) {
            isDrew2D = true;
        }
        //reset image
        img2D = copyImage(img2DPicture);
        //draw picture
        startPicture();
    }//GEN-LAST:event_cbPictureActionPerformed

    private void tbbStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tbbStateChanged
        // TODO add your handling code here:
        if (tbb.getSelectedIndex() == 0) {
            if (cbClockwatcher.isSelected()) {
                cbClockwatcher.doClick();
            } else if (cbPicture.isSelected()) {
                cbPicture.doClick();
            }
        }
    }//GEN-LAST:event_tbbStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new main().setVisible(true);
        });
    }

    private void runClockwatcher() {
        int time_delay = 150;
        int alpha = 0;
        boolean left = false;
        BufferedImage imgTemp;
        while (true) {
            //check
            if (cbClockwatcher.isSelected() == false || tbb.getSelectedIndex() != 0) {
                return;
            }
            imgTemp = copyImage(img2D);
            if (left) {
                alpha -= 3;
            } else {
                alpha += 3;
            }
            Clockwatcher cw = new Clockwatcher(rootClockwatcher, imgTemp, ratioClockwatcher);
            imgTemp = cw.draw((float) Math.toRadians(alpha));
            if (alpha == 12 || alpha == -12) {
                left = !left;
            }
            if (cbGrib.isSelected()) {
                drawOxy(imgTemp);
            }
            Graphics g = lbl2D.getGraphics();
            g.drawImage(imgTemp, 0, 0, null);
            if (tbbShow.getSelectedIndex() == 0) {
                showValue(cw);
            }
            try {
                Thread.sleep(time_delay);
            } catch (InterruptedException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void runPicture() {
        int times = 0, time_delay = 150, s1 = -4, s2 = -10, s3 = 0, s4 = -15;
        BufferedImage imgTemp;
        while (true) {
            if (cbPicture.isSelected() == false || tbb.getSelectedIndex() != 0) {
                return;
            }
            imgTemp = copyImage(img2D);

            RoadMarking rm = new RoadMarking(imgTemp, rootCar, ratioCar);
            imgTemp = rm.drawRoadMarking(times % 10);
            if (tbbShow.getSelectedIndex() == 1) {
                showValue(rm);
            }
            //draw car
            Car car = new Car(rootCar, imgTemp, ratioCar);
            imgTemp = car.draw(ratioCar, times % 3);
            if (tbbShow.getSelectedIndex() == 3) {
                showValue(car);
            }
            //draw star
            Point rootStar1 = new Point(1160, -10);
            Point rootStar2 = new Point(1160, -10);
            Point rootStar3 = new Point(1500, -10);
            Point rootStar4 = new Point(1500, -10);
            Star st1 = new Star(imgTemp, rootStar1, ratioCar);
            Star st2 = new Star(imgTemp, rootStar2, ratioCar);
            Star st3 = new Star(imgTemp, rootStar3, ratioCar);
            Star st4 = new Star(imgTemp, rootStar4, ratioCar);
            imgTemp = st1.drawStar(s1 % 24);
            imgTemp = st2.drawStar(s2 % 24);
            imgTemp = st3.drawStar(s3 % 24);
            imgTemp = st4.drawStar(s4 % 24);
            //show info
            if (tbbShow.getSelectedIndex() == 2) {
                showValue(st1, st2, st3);
            }
            if (cbGrib.isSelected()) {
                drawOxy(imgTemp);
            }
            //draw on lbl2D
            Graphics g = lbl2D.getGraphics();
            g.drawImage(imgTemp, 0, 0, null);
            //sleep
            try {
                Thread.sleep(time_delay);
            } catch (InterruptedException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
            times++;
            s1++;
            s2++;
            s3++;
            s4++;
        }
    }

    private BufferedImage readFileBufferedImage(String path) {
        try {
            return ImageIO.read(new File(path));
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private void setIcon(BufferedImage img, JLabel lbl) {
        lbl.setIcon(new ImageIcon(img));
    }

    private void showValue(Clockwatcher cw)  {
        int x = 200, y = 32;
        BufferedImage imgShow = readFileBufferedImage(pathCwShow);
        Graphics g = imgShow.getGraphics();
        g.setColor(Color.black);
        //SHOW VALUE
        g.drawString((int) Math.round((cw.getA().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getA().getY()) / 5), 52, 23 + y * 0);
        g.drawString((int) Math.round((cw.getB().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getB().getY()) / 5), 52, 23 + y * 1);
        g.drawString((int) ((cw.getC().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getC().getY()) / 5), 52, 23 + y * 2);
        g.drawString((int) Math.round((cw.getD().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getD().getY()) / 5), 52, 23 + y * 3);
        g.drawString((int) Math.round((cw.getlH().getStart().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getlH().getStart().getY()) / 5), 52, 23 + y * 4);
        g.drawString((int) Math.round((cw.getlM().getStart().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getlM().getStart().getY()) / 5), 52, 23 + y * 5);
        g.drawString((int) Math.round((cw.getlS().getStart().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getlS().getStart().getY()) / 5), 52, 23 + y * 6);
        g.drawString((int) Math.round((cw.getE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getE().getY()) / 5), 52, 23 + y * 7);
        g.drawString((int) Math.round((cw.getG().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getG().getY()) / 5), 52, 23 + y * 8);
        g.drawString((int) Math.round((cw.getI().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getI().getY()) / 5), 52, 23 + y * 9);

        g.drawString((int) Math.round((cw.getA1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getA1().getY()) / 5), 52 + x, 23 + y * 0);
        g.drawString((int) Math.round((cw.getB1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getB1().getY()) / 5), 52 + x, 23 + y * 1);
        g.drawString((int) Math.round((cw.getC1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getC1().getY()) / 5), 52 + x, 23 + y * 2);
        g.drawString((int) Math.round((cw.getD1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getD1().getY()) / 5), 52 + x, 23 + y * 3);
        g.drawString((int) Math.round((cw.getlH().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getlH().getEnd().getY()) / 5), 52 + x, 23 + y * 4);
        g.drawString((int) Math.round((cw.getlM().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getlM().getEnd().getY()) / 5), 52 + x, 23 + y * 5);
        g.drawString((int) Math.round((cw.getlH().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getlS().getEnd().getY()) / 5), 52 + x, 23 + y * 6);
        g.drawString((int) Math.round((cw.getF().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getF().getY()) / 5), 52 + x, 23 + y * 7);
        g.drawString((int) Math.round((cw.getG().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - cw.getG().getY()) / 5), 52 + x, 23 + y * 8);
        //DRAW
        Graphics g1 = pnlClockwatcher.getGraphics();
        g1.drawImage(imgShow, 0, 0, null);
    }

    private void showValue(Car car) {
        int x = 200, y = 32;
        BufferedImage imgShow = readFileBufferedImage(pathCarShow);
        Graphics g = imgShow.getGraphics();
        //SHOW VALUE
        g.setColor(Color.BLACK);
        g.drawString((int) Math.round((car.getA().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getA().getY()) / 5), 55, 23 + y * 0);
        g.drawString((int) Math.round((car.getB().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getB().getY()) / 5), 55, 23 + y * 1);
        g.drawString((int) Math.round((car.getC().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getC().getY()) / 5), 55, 23 + y * 2);
        g.drawString((int) Math.round((car.getD().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getD().getY()) / 5), 55, 23 + y * 3);
        g.drawString((int) Math.round((car.getE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getE().getY()) / 5), 55, 23 + y * 4);
        g.drawString((int) Math.round((car.getF().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getF().getY()) / 5), 55, 23 + y * 5);
        g.drawString((int) Math.round((car.getG().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getG().getY()) / 5), 55, 23 + y * 6);
        g.drawString((int) Math.round((car.getH().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getH().getY()) / 5), 55, 23 + y * 7);
        g.drawString((int) Math.round((car.getI().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getI().getY()) / 5), 55, 23 + y * 8);
        g.drawString((int) Math.round((car.getJ().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getJ().getY()) / 5), 55, 23 + y * 9);
        g.drawString((int) Math.round((car.getK().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getK().getY()) / 5), 55, 23 + y * 10);
        g.drawString((int) Math.round((car.getM().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getM().getY()) / 5), 55, 23 + y * 11);
        g.drawString((int) Math.round((car.getN().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getN().getY()) / 5), 55, 23 + y * 12);
        g.drawString((int) Math.round((car.getO1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getO1().getY()) / 5), 55, 23 + y * 13);
        g.drawString((int) Math.round((car.getO2().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getO2().getY()) / 5), 55, 23 + y * 14);
        g.drawString((int) Math.round((car.getO3().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getO3().getY()) / 5), 55, 23 + y * 15);
        g.drawString((int) Math.round((car.getO4().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getO4().getY()) / 5), 55, 23 + y * 16);

        g.drawString((int) Math.round((car.getA1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getA1().getY()) / 5), 55 + x, 23 + y * 0);
        g.drawString((int) Math.round((car.getB1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getA1().getY()) / 5), 55 + x, 23 + y * 1);
        g.drawString((int) Math.round((car.getC1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getA1().getY()) / 5), 55 + x, 23 + y * 2);
        g.drawString((int) Math.round((car.getD1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getA1().getY()) / 5), 55 + x, 23 + y * 3);
        g.drawString((int) Math.round((car.getE1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getA1().getY()) / 5), 55 + x, 23 + y * 4);
        g.drawString((int) Math.round((car.getF1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getA1().getY()) / 5), 55 + x, 23 + y * 5);
        g.drawString((int) Math.round((car.getG1().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getA1().getY()) / 5), 55 + x, 23 + y * 6);
        g.drawString((int) Math.round((car.getL1().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL1().getEnd().getY()) / 5), 55 + x, 23 + y * 7);
        g.drawString((int) Math.round((car.getL2().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL2().getEnd().getY()) / 5), 55 + x, 23 + y * 8);
        g.drawString((int) Math.round((car.getL3().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL3().getEnd().getY()) / 5), 55 + x, 23 + y * 9);
        g.drawString((int) Math.round((car.getL4().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL4().getEnd().getY()) / 5), 55 + x, 23 + y * 10);
        g.drawString((int) Math.round((car.getL5().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL5().getEnd().getY()) / 5), 55 + x, 23 + y * 11);
        g.drawString((int) Math.round((car.getL6().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL6().getEnd().getY()) / 5), 55 + x, 23 + y * 12);
        g.drawString((int) Math.round((car.getL7().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL7().getEnd().getY()) / 5), 55 + x, 23 + y * 13);
        g.drawString((int) Math.round((car.getL8().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL8().getEnd().getY()) / 5), 55 + x, 23 + y * 14);
        g.drawString((int) Math.round((car.getL9().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL9().getEnd().getY()) / 5), 55 + x, 23 + y * 15);
        g.drawString((int) Math.round((car.getL10().getEnd().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - car.getL10().getEnd().getY()) / 5), 55 + x, 23 + y * 16);
        //DRAW
        Graphics g1 = pnlClockwatcher.getGraphics();
        g1.drawImage(imgShow, 0, 0, null);
    }

    private void showValue(Star s1, Star s2, Star s3) {
        int x = 200, y = 32;
        BufferedImage imgShow = readFileBufferedImage(pathStarShow);
        Graphics g = imgShow.getGraphics();
        //SHOW VALUE
        g.setColor(Color.BLACK);
        g.drawString((int) Math.round((s1.getA().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getA().getY()) / 5), 52, 23 + y * 0);
        g.drawString((int) Math.round((s1.getB().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getB().getY()) / 5), 52, 23 + y * 1);
        g.drawString((int) Math.round((s1.getC().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getC().getY()) / 5), 52, 23 + y * 2);
        g.drawString((int) Math.round((s1.getD().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getD().getY()) / 5), 52, 23 + y * 3);
        g.drawString((int) Math.round((s1.getE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getE().getY()) / 5), 52, 23 + y * 4);
        g.drawString((int) Math.round((s2.getA().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getA().getY()) / 5), 52, 23 + y * 5);
        g.drawString((int) Math.round((s2.getB().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getB().getY()) / 5), 52, 23 + y * 6);
        g.drawString((int) Math.round((s2.getC().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getC().getY()) / 5), 52, 23 + y * 7);
        g.drawString((int) Math.round((s2.getD().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getD().getY()) / 5), 52, 23 + y * 8);
        g.drawString((int) Math.round((s2.getE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getE().getY()) / 5), 52, 23 + y * 9);
        g.drawString((int) Math.round((s3.getA().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getA().getY()) / 5), 52, 23 + y * 10);
        g.drawString((int) Math.round((s3.getB().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getB().getY()) / 5), 52, 23 + y * 11);
        g.drawString((int) Math.round((s3.getC().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getC().getY()) / 5), 52, 23 + y * 12);
        g.drawString((int) Math.round((s3.getD().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getD().getY()) / 5), 52, 23 + y * 13);
        g.drawString((int) Math.round((s3.getE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getE().getY()) / 5), 52, 23 + y * 14);

        g.drawString((int) Math.round((s1.getF().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getF().getY()) / 5), 52 + x, 23 + y * 0);
        g.drawString((int) Math.round((s1.getG().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getG().getY()) / 5), 52 + x, 23 + y * 1);
        g.drawString((int) Math.round((s1.getH().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getH().getY()) / 5), 52 + x, 23 + y * 2);
        g.drawString((int) Math.round((s1.getI().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getI().getY()) / 5), 52 + x, 23 + y * 3);
        g.drawString((int) Math.round((s1.getJ().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s1.getJ().getY()) / 5), 52 + x, 23 + y * 4);
        g.drawString((int) Math.round((s2.getF().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getF().getY()) / 5), 52 + x, 23 + y * 5);
        g.drawString((int) Math.round((s2.getG().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getG().getY()) / 5), 52 + x, 23 + y * 6);
        g.drawString((int) Math.round((s2.getH().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getH().getY()) / 5), 52 + x, 23 + y * 7);
        g.drawString((int) Math.round((s2.getI().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getI().getY()) / 5), 52 + x, 23 + y * 8);
        g.drawString((int) Math.round((s2.getJ().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s2.getJ().getY()) / 5), 52 + x, 23 + y * 9);
        g.drawString((int) Math.round((s3.getF().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getF().getY()) / 5), 52 + x, 23 + y * 10);
        g.drawString((int) Math.round((s3.getG().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getG().getY()) / 5), 52 + x, 23 + y * 11);
        g.drawString((int) Math.round((s3.getH().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getH().getY()) / 5), 52 + x, 23 + y * 12);
        g.drawString((int) Math.round((s3.getI().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getI().getY()) / 5), 52 + x, 23 + y * 13);
        g.drawString((int) Math.round((s3.getJ().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - s3.getJ().getY()) / 5), 52 + x, 23 + y * 14);
        //DRAW
        Graphics g1 = pnlClockwatcher.getGraphics();
        g1.drawImage(imgShow, 0, 0, null);
    }

    private void showValue(RoadMarking rm) {
        int x = 180, y = 32;
        BufferedImage imgShow = readFileBufferedImage(pathRoadMarkingShow);
        Graphics g = imgShow.getGraphics();
        //SHOW VALUE
        g.setColor(Color.BLACK);
        g.drawString((int) Math.round((rm.getR1().getRootS().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR1().getRootS().getY()) / 5), 60, 31 + y * 0);
        g.drawString((int) Math.round((rm.getR2().getRootS().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR2().getRootS().getY()) / 5), 60, 31 + y * 1);
        g.drawString((int) Math.round((rm.getR3().getRootS().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR3().getRootS().getY()) / 5), 60, 31 + y * 2);
        g.drawString((int) Math.round((rm.getR4().getRootS().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR4().getRootS().getY()) / 5), 60, 31 + y * 3);
        g.drawString((int) Math.round((rm.getR5().getRootS().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR5().getRootS().getY()) / 5), 60, 31 + y * 4);
        g.drawString((int) Math.round((rm.getR6().getRootS().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR6().getRootS().getY()) / 5), 60, 31 + y * 5);
        g.drawString((int) Math.round((rm.getR7().getRootS().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR7().getRootS().getY()) / 5), 60, 31 + y * 6);

        g.drawString((int) Math.round((rm.getR1().getRootE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR1().getRootE().getY()) / 5), 60 + x, 31 + y * 0);
        g.drawString((int) Math.round((rm.getR2().getRootE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR2().getRootE().getY()) / 5), 60 + x, 31 + y * 1);
        g.drawString((int) Math.round((rm.getR3().getRootE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR3().getRootE().getY()) / 5), 60 + x, 31 + y * 2);
        g.drawString((int) Math.round((rm.getR4().getRootE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR4().getRootE().getY()) / 5), 60 + x, 31 + y * 3);
        g.drawString((int) Math.round((rm.getR5().getRootE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR5().getRootE().getY()) / 5), 60 + x, 31 + y * 4);
        g.drawString((int) Math.round((rm.getR6().getRootE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR6().getRootE().getY()) / 5), 60 + x, 31 + y * 5);
        g.drawString((int) Math.round((rm.getR7().getRootE().getX() - WIDTH2D / 2) / 5) + "; "
                + (int) Math.round((HEIGHT2D / 2 - rm.getR7().getRootE().getY()) / 5), 60 + x, 31 + y * 6);
        //DRAW
        Graphics g1 = pnlClockwatcher.getGraphics();
        g1.drawImage(imgShow, 0, 0, null);
    }

    private BufferedImage drawOxy(BufferedImage image) {
        Graphics g = image.getGraphics();
        //Truc
        g.setColor(Color.black);
        g.drawLine(0, HEIGHT2D / 2, WIDTH2D, HEIGHT2D / 2);
        g.drawLine(WIDTH2D / 2, 0, WIDTH2D / 2, HEIGHT2D);
        drawGrib(image);
        return image;
    }

    public BufferedImage drawGrib(BufferedImage image) {
        Graphics g = image.getGraphics();
        int ratio = 5;
        //
        int sum = 0;
        g.setColor(Color.red);
        while (sum != HEIGHT2D / 2) {
            sum += ratio;
            g.drawLine(0, HEIGHT2D / 2 + sum, WIDTH2D, HEIGHT2D / 2 + sum);
            g.drawLine(0, HEIGHT2D / 2 - sum, WIDTH2D, HEIGHT2D / 2 - sum);
        }
        sum = 0;
        while (sum != WIDTH2D / 2) {
            sum += ratio;
            g.drawLine(WIDTH2D / 2 + sum, 0, WIDTH2D / 2 + sum, HEIGHT2D);
            g.drawLine(WIDTH2D / 2 - sum, 0, WIDTH2D / 2 - sum, HEIGHT2D);
        }
        return image;
    }

    private void startClockwatcher() {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                runClockwatcher();
                return null;
            }

        };
        worker.execute();
    }

    private void startPicture() {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                runPicture();
                return null;
            }

        };
        worker.execute();
    }

    public void resetInforLable() {
        lblA.setText("");
        lblB.setText("");
        lblC.setText("");
        lblD.setText("");
        lblE.setText("");
        lblF.setText("");
        lblG.setText("");
        lblH.setText("");
    }

    public BufferedImage copyImage(BufferedImage image) {
        BufferedImage temp = new BufferedImage(image.getWidth(), image.getHeight(),
                BufferedImage.TYPE_INT_RGB);
        Graphics g = temp.getGraphics();
        g.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), null);
        return temp;
    }

    public void positionVisible3D(boolean isVisible) {
        lblG.setVisible(isVisible);
        lblH.setVisible(isVisible);
    }

    private String pathCwShow = "./src/image/ClockwatcherShow.PNG";
    private String pathRoadMarkingShow = "./src/image/RoadMarkingShow.PNG";
    private String pathStarShow = "./src/image/StarShow.PNG";
    private String pathCarShow = "./src/image/CarShow.PNG";
    private String path2D = "./src/image/img2d.jpg";
    private String path3D = "./src/image/img3d.jpg";
    private String path2DPicture = "./src/image/bg.jpg";
    private String path2DClockwatcher = "./src/image/img.jpg";
    private Point rootCar = new Point(460, 400);
    ;
    private Point rootClockwatcher = new Point(890, 130);
    boolean isDrew2D = false;
    boolean isDrew = false;
    boolean isDrewOxy = false;
    boolean isDrewGrib = false;
    private BufferedImage originImage3D;
    private BufferedImage originImage2D;
    private BufferedImage img3D;
    private BufferedImage img2D;
    private BufferedImage img2DPicture;
    private BufferedImage img2DClockwatcher;
    private boolean isRectangular = true;
    private int ratioClockwatcher = 20;
    private int ratioCar = 100;
    final private int WIDTH2D;
    final private int WIDTH3D;
    final private int HEIGHT3D;
    final private int HEIGHT2D;
    final private Point root3D;
    final private Point root2D;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDraw;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbClockwatcher;
    private javax.swing.JCheckBox cbGrib;
    private javax.swing.JCheckBox cbPicture;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel lbl1;
    private javax.swing.JPanel lbl2;
    private javax.swing.JLabel lbl2D;
    private javax.swing.JLabel lbl3;
    private javax.swing.JLabel lbl3D;
    private javax.swing.JLabel lbl4;
    private javax.swing.JLabel lbl5;
    private javax.swing.JLabel lbl6;
    private javax.swing.JLabel lblA;
    private javax.swing.JLabel lblB;
    private javax.swing.JLabel lblC;
    private javax.swing.JLabel lblD;
    private javax.swing.JLabel lblE;
    private javax.swing.JLabel lblF;
    private javax.swing.JLabel lblG;
    private javax.swing.JLabel lblH;
    private javax.swing.JLabel lblRect;
    private javax.swing.JLabel lblSquarePyramid;
    private javax.swing.JPanel pnlCar;
    private javax.swing.JPanel pnlClockwatcher;
    private javax.swing.JTabbedPane tbb;
    private javax.swing.JTabbedPane tbbShow;
    private javax.swing.JTextField txt1;
    private javax.swing.JTextField txt2;
    private javax.swing.JTextField txt3;
    private javax.swing.JTextField txt4;
    private javax.swing.JTextField txt5;
    private javax.swing.JTextField txt6;
    // End of variables declaration//GEN-END:variables
}
